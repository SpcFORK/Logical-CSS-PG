@import url('./spectreCPU.css');

/* 
abs()
acos()
asin()
atan()
atan2()
attr()
calc()
clamp()
cos()
counter()
counters()
cross-fade()
element()
env()
exp()
fit-content()
hypot()
log()
max()
min()
minmax()
mod()
path()
pow()
ray()
rem()
repeat()
round()
sign()
sin()
sqrt()
symbols()
tan()
url()
var()
*/

:root {
  --value1: 5;
  --value2: 5;
}

.element {

  /* Within 1 ~ 0 */
  /* "is" made with Math
    --output: max(
      min(
        var(--value1), 0 
      ), 
      1
    )
  */

  /* "Not Equal" made with Math */

  --result: calc(var(--value1) - var(--value2));
  --output: calc((var(--result) * var(--result)) / (var(--result) * var(--result) + 1));


  /* "Greater Than" made with Math */
  /* 
  --output: min(
    1,
    max(
      var(--value1) - var(--value2), 
      0
    )
  ); 
  */

  /* "Less Than" made with Math */
  /* --output: min(
    1,
    max(
      var(--value2) - var(--value1), 
      0
    )
  );  */


  /* "Less Than" made with Math */
  /* --output: Max(1, Min(var(--value1) - var(--value2), 0)) */

  /* Backwards Compat Abs() */
  /* max(var(--lh), -1 * var(--lh)); */

  /* 'Equals' */
  /* 
  --result: calc(var(--value1) - var(--value2)); */
  /* 
  --output: calc(exp((var(--result) * var(--result)) / (var(--result) * var(--result) + 1))); 
  */


  /* 'Or' */

  /* --result: calc(var(--value1) - var(--value2));
  --output: calc(
    -1 + max(
      min(
        var(--result) / var(--result),
        0 
      ), 
      2
    )
  ); */

  /* 'And' */
  /* --output: calc(
    min(
      1,
      max(
        var(--value1), 0 
      )
    )

    + min(
      1,
      max(
        var(--value2), 0 
      ) 
    )

    * -1 * min(
      1,
      max(
        var(--value1), 0 
      )
    )

    + min(
      1,
      max(
        var(--value2), 0 
      ) 
    )
  ) */

  /* 'XOR' */
  /* --result: calc(var(--value1) - var(--value2));
  --output: calc(
    1 + (var(--value1) * var(--value2)) / max(
      min(
        var(--result) / var(--result),
        0 
      ), 
      2
    )
  ); */

  /* 'NAND' */
  /* calc(1 - var(--k)*var(--i)) */
  /* --output: calc(
    -1 * (
      min(
        1,
        max(
          var(--value1), 0 
        )
      )
  
      + min(
        1,
        max(
          var(--value2), 0 
        ) 
      )
  
      + min(
        -1,
        max(
          var(--value1), 0 
        )
      )
      
      + min(
          -1,
          max(
            var(--value2), 0 
          )
        )
      ) 
  )

   */

  /* 'NOR' */
  /* --output: calc(
    -1 - (
      min(
        1,
        max(
          var(--value1), 0 
        )
      )

      + min(
        1,
        max(
          var(--value2), 0 
        ) 
      )

      + min(
        -1,
        max(
          var(--value1), 0 
        )
      )

      + min(
          -1,
          max(
            var(--value2), 0 
          )
        )
      ) 
  ) */

}

/* Style the output based on its value */
.element::after {

  counter-reset: counter var(--output);
  content: counter(counter);

  display: block;
  width: 20px;
  height: 20px;
  background-color: black;
  color: white;
  text-align: center;
  line-height: 20px;
}

.element::before {
  counter-reset: counter2 var(--result);
  content: counter(counter2);

  display: block;
  width: 20px;
  height: 20px;
  background-color: black;
  color: white;
  text-align: center;
  line-height: 20px;
}